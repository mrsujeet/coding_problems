/*
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

Example run: "({[]})"
( → push ) → stack [)]

{ → push } → [), }]

[ → push ] → [), }, ]]

] matches top → pop → [), }]

} matches top → pop → [)]

) matches top → pop → []

End of string → stack empty → valid.

*/


public boolean isValid(String s) {
        if(s.isEmpty()) return true;
        Stack<Character> stk= new Stack<>();
        for(int i=0; i<s.length(); i++){
            char c=s.charAt(i);
            if(c=='('){
                stk.push(')');
            }else if(c=='{'){
                stk.push('}');
            }else if(c=='['){
                stk.push(']');
            }else{
                if(stk.isEmpty()||stk.pop()!=c){
                    return false;
                }
            }

        }

        return stk.isEmpty();
     }
