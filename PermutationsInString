/*
https://leetcode.com/problems/permutation-in-string/description/

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.

| Feature          | **Second Version (Array)** | **First Version (Map)** |
| ---------------- | ------------------------- | ------------------------ |
| Time Efficiency  | ✅ Faster                  | ❌ Slightly slower        |
| Space Efficiency | ✅ Constant (O(1))         | ❌ Higher (O(k))          |
| Flexibility      | ❌ Only lowercase letters  | ✅ Adaptable              |
| Simplicity       | ✅ Clean and short         | ❌ More logic complexity  |



*/


 public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length())
            return false;

        int match = 0;
        int start = 0;

        Map<Character, Integer> map = new HashMap<>();

        for (int i = 0; i < s1.length(); i++) {
            char c = s1.charAt(i);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        for (int end = 0; end < s2.length(); end++) {
            char c = s2.charAt(end);

            if (map.containsKey(c)) {
                map.put(c, map.get(c) - 1);
                if (map.get(c) == 0) {
                    match++;
                }
            }

            if (match == map.size()) {
                return true;
            } else {

                if (end - start + 1 >= s1.length()) {
                    char lChar = s2.charAt(start);
                    if (map.containsKey(lChar)) {

                        if (map.get(lChar) == 0) {
                            match--;
                        }
                        map.put(lChar, map.getOrDefault(lChar, 0) + 1);
                    }
                    start++;
                }

            }

        }

        return false;
    }

    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length())
            return false;

        int[] arrS1 = new int[26];
        int[] arrS2 = new int[26];

        //frequencey of chars of s1 length

        for (int i = 0; i < s1.length(); i++) {
            arrS1[s1.charAt(i) - 'a']++;
            arrS2[s2.charAt(i) - 'a']++;
        }

        if (Arrays.equals(arrS1, arrS2))
            return true;

        for (int j = s1.length(); j < s2.length(); j++) {
            arrS2[s2.charAt(j - s1.length()) - 'a']--;
            arrS2[s2.charAt(j) - 'a']++;

            if (Arrays.equals(arrS1, arrS2))
                return true;

        }

        return false;

    }
