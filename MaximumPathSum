/*

https://leetcode.com/problems/binary-tree-maximum-path-sum/?envType=study-plan-v2&envId=top-100-liked

A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

Example 1:


Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.
Example 2:


Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.
 

Constraints:

The number of nodes in the tree is in the range [1, 3 * 104].
-1000 <= Node.val <= 1000

Binary Tree – Global Max Path Sum = 42





Here's how to read the visual outputs you now have:

1  Node‑by‑node table
leftMax / rightMax – the best downward‑going path you can take from each child (or 0 if taking that child would hurt the total).

sumThrough – what you’d get if you treated that node as a bridge that connects its best left and right sub‑paths.

returnVal – what bubbles up to the parent: the node’s own value plus the larger of its two child gains.
The largest sumThrough seen while the traversal runs is stored in the global maxSum.

2  Tree diagram
The picture mirrors the example tree from the code, with a title showing the final maxSum = 42.
As the algorithm recurses:

It dives to the leaves, returning 0 for missing children.

Each node calculates leftMax, rightMax, its local bridge sum, and then pushes a single‑side path value up to its parent.

Whenever a local bridge sum beats the running record, maxSum is updated—so when the traversal finishes, maxSum holds the best anywhere‑to‑anywhere path in the whole tree.

For this tree the winning path is 15 → 20 → 7 (15 + 20 + 7 = 42).
*/

int maxSum=Integer.MIN_VALUE;

  public int maxPathSum(TreeNode root) {
    findMaxSum(root);
    return maxSum;
  }

 private int  findMaxSum(TreeNode root){
    if(root==null)   return 0;
    int leftMax=Math.max(findMaxSum(root.left),0);
    int rightMax=Math.max(findMaxSum(root.right),0);
   
   int sum=leftMax+rightMax+root.val;
   maxSum=Math.max(sum,maxSum);

   return root.val+Math.max(leftMax,rightMax);

 }
