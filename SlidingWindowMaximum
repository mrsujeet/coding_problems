/*
https://leetcode.com/problems/sliding-window-maximum/description/

  You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

Analysis:

    At each iteration, a new window is formed as per question. To achieve maxSlidingWindow efficiently, an additional data structure is required and appropriate condition should be imposed which can help in figuring out highest value element for the given window as window is moved from left to right.
    To acheive this,the algorithm should ensure :
    1) The DS should remove element which is out of boundry
    2) The DS should have way to figure out the highest number for the given window, i.e. decreasing list of array elements, so that first element, representing the highest value elemnt of the given window.
    
    To satisfy the criterion mentioned above, A Deque implementation of LinkedList can be utilized. A Deque, known as double ended queue is special type of ds
    It gives you the flexibility to do all of the following:
    
    Add to the front
    Add to the back
    Remove from the front
    Remove from the back
    Look at (peek at) the front element
    Look at (peek at) the back element

Once this DS satisfy the above two criteria, adding first element in the result Array will end up with final list.

Note:
The maximum possible size of the Deque at any point during the execution of the maxSlidingWindow algorithm is k.

Consider this example:
nums = [10, 9, 8, 7, 6, 5] and k = 4.

i = 0, nums[0]=10: deq is [0]
i = 1, nums[1]=9: 9 is not greater than 10. deq is [0, 1]
i = 2, nums[2]=8: 8 is not greater than 9. deq is [0, 1, 2]
i = 3, nums[3]=7: 7 is not greater than 8. deq is [0, 1, 2, 3]. The Deque now has size 4, which is k.
    */

    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int [] result = new int[n-k+1];
        int index=0;
/* maintaining array elemets value in decreaing order. Though elements values are decresing order but index are in increasing order.  */
        Deque<Integer> deq= new LinkedList<>(); 

        for(int i=0; i<nums.length; i++){

            if(!deq.isEmpty() && deq.peekFirst()<=i-k){ //ensuring the deq element is not out of left boundry of sliding window
                    deq.pollFirst();
            }

            while(!deq.isEmpty() && nums[deq.peekLast()]<nums[i]){
                deq.pollLast();
            }
            deq.offerLast(i);

            if(i>=k-1){
               result[index++]= nums[deq.peekFirst()];
            }

        }

        return result;
    }
