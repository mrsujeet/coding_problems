/*
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107


Why Does This Work? (Intuition):
We maintain a cumulative sum as we traverse the array.

When we encounter a cumulative sum, we ask the question:
"Have we seen a previous cumulative sum such that the difference between the current cumulative sum and that previous sum equals k?"

If yes, we've found a subarray!

The HashMap (map) stores frequencies of sums we've seen to quickly answer this question.

⚡ Quick Recap (Key Points):
sum → tracks running total

map → stores cumulative sums encountered and their frequency

(sum - k) → checks for previous cumulative sum that would form subarray

count → number of valid subarrays found
*/

public int subarraySum(int[] nums, int k) {
    int count=0;
    int sum=0;
    Map <Integer, Integer> map= new HashMap<>();
    map.put(0,1);

    for(int i=0; i<nums.length; i++){
        sum+=nums[i];
        if(map.containsKey(sum-k)){
            count+=map.get(sum-k);
        }
        map.put(sum,map.getOrDefault(sum,0)+1);

    }
    return count;

}


