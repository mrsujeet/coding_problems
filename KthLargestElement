/*
Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.

Can you solve it without sorting?

 

Example 1:

Input: nums = [3,2,1,5,6,4], k = 2
Output: 5
Example 2:

Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4

Every new number is added.

If that pushes the count beyond k, we evict the smallest—the one that cannot possibly be in the final top-k.

After scanning all elements, nothing outside the heap could be larger than the heap’s root and missing from the heap, by construction.

Therefore the root is the k-th largest.

Common tweaks
k-th smallest instead?
Use a max-heap (new PriorityQueue<>(Collections.reverseOrder())) and adjust the logic similarly.
*/

public int findKthLargest(int[] nums, int k) {
    PriorityQueue<Integer> pq=new PriorityQueue<>();// Java min-queue
        for(int i=0; i<nums.length; i++){
            pq.offer(nums[i]); //add element
            if(pq.size()>k){
                pq.poll(); //remove minimum element
            }
        }
        return pq.peek(); //give minimum element
    }
