/*
https://leetcode.com/problems/find-all-anagrams-in-a-string/description/

Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.

| Feature          | **First Version (Array)** | **Second Version (Map)** |
| ---------------- | ------------------------- | ------------------------ |
| Time Efficiency  | ✅ Faster                  | ❌ Slightly slower        |
| Space Efficiency | ✅ Constant (O(1))         | ❌ Higher (O(k))          |
| Flexibility      | ❌ Only lowercase letters  | ✅ Adaptable              |
| Simplicity       | ✅ Clean and short         | ❌ More logic complexity  |



*/


 public List<Integer> findAnagrams(String s, String p) {
        List<Integer> list=new ArrayList<>();
         if (s.length() < p.length()) return list;

        int[]carrP =new int[26]; // To maintain all chars frequency in P
        int[]carrS=new int[26]; // To maintain all chars frequency in a window of p length in strin s

        for(int i=0; i<p.length(); i++){
            carrP[p.charAt(i)-'a']++;
            carrS[s.charAt(i)-'a']++;

        }
        if(Arrays.equals(carrP,carrS)){
            list.add(0);
        }

        for(int j=p.length(); j<s.length(); j++){
                carrS[s.charAt(j-p.length())-'a']--; //removing left char of the window
                carrS[s.charAt(j)-'a']++; //adding right char of window

                if(Arrays.equals(carrP,carrS)){
                    list.add(j-p.length()+1);
                }

        }

        return list;

    }
  
  
  
  
  
  
  
  
    public List<Integer> findAnagrams(String s, String p) {
        
      
        List<Integer> list= new ArrayList<>();
        Map<Character,Integer> map=new HashMap<>();
        int start=0;
        int matched=0;
        
        for(int i=0; i<p.length(); i++){
            char c=p.charAt(i);
            map.put(c,map.getOrDefault(c,0)+1);            
        }
        
      
        
        for(int end=0; end<s.length(); end++){
            
            char ch=s.charAt(end);
            
            if(map.containsKey(ch)){
                
                map.put(ch, map.get(ch)-1);
                
                if(map.get(ch)==0){
                    matched++;
                }
                
            }
            
            if(matched==map.size()){
                list.add(start);
            }
            
            
            
            // if(end-start+1>=p.length()){
             if(end>=p.length()-1){
                char startChar=s.charAt(start);                
                if(map.containsKey(startChar)){
                    if(map.get(startChar)==0){
                        matched--;
                    }
                    map.put(startChar, map.get(startChar)+1);
                    
                   
                }
                
                start++;
                
            }
            
           
               
            }
            
        
        return list;
       
    }
}
